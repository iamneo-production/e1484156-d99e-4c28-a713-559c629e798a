// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetapp.Models;

namespace dotnetapp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230723134059_InitialSetup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("dotnetapp.Models.AddOn", b =>
                {
                    b.Property<int>("addOnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("addOnDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("addOnImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("addOnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("addOnPrice")
                        .HasColumnType("bigint");

                    b.HasKey("addOnId");

                    b.ToTable("AddOns");
                });

            modelBuilder.Entity("dotnetapp.Models.Event", b =>
                {
                    b.Property<int>("eventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("EventCost")
                        .HasColumnType("bigint");

                    b.Property<string>("addOnIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicantAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicantEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicantMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventmenuIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("noOfPeople")
                        .HasColumnType("bigint");

                    b.Property<int>("themeId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("eventId");

                    b.HasIndex("themeId");

                    b.HasIndex("userId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("dotnetapp.Models.Menu", b =>
                {
                    b.Property<int>("foodMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("foodMenuCost")
                        .HasColumnType("bigint");

                    b.Property<string>("foodMenuImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodMenuItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("foodMenuType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodMenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("dotnetapp.Models.Theme", b =>
                {
                    b.Property<int>("themeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("themeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("themeCost")
                        .HasColumnType("bigint");

                    b.Property<string>("themeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("themeImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("themeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("themePhotographer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("themeReturnGift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("themeVideographer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("themeId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("dotnetapp.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dotnetapp.Models.Event", b =>
                {
                    b.HasOne("dotnetapp.Models.Theme", "themes")
                        .WithMany()
                        .HasForeignKey("themeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetapp.Models.User", "users")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("themes");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
